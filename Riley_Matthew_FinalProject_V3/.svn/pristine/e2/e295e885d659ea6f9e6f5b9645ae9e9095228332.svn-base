/**
 * Matthew Riley ICS3U-1 Final Project - Turret Class April 14, 2014
 */
package riley_matthew_finalproject_v3;

import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import javax.imageio.ImageIO;

/**
 *
 * @author matthewriley
 */
public class Turret {

    //Image
    private BufferedImage img;

    //Dimensions
    private final int width, height;

    //Positioning
    public final int posX;
    public final int posY;

    //Rotation
    private double rotationAngle;
    private double destinationAngle;
    private double bearing;

    //Status
    private boolean alive;

    //Bounding body for collisions
    private final Shape bodyZone; //MAKE AN ELLIPSE - can be any shape

    //Reference to UFO player
    private static UFO myUFO;

    //Reference to bullets
    private static ArrayList<Bullet> turretBullets;

    //Cooldown timing (for fire rates)
    private int coolDownTime;
    private double fireRate;
    private int volleyTime;
    private boolean newVolley;
    private int roundCounter;
    Timer coolDownTimer;
    Timer fireRateTimer;
    Timer fireTimer;

    //For bullet patterning
    private double patternCounter;

    //Fire type
    int fireType;

    //Constructor
    public Turret(int _posX, int _posY) throws IOException {

        //When first spawned, there is a warning sign (to warn the UFO of an incoming turret)
        //After the warning is complete, the image changes to a turret
        URL imgURL = getClass().getResource(Const.TURRET_URL);
        img = ImageIO.read(imgURL);

        //Set image dimensions
        width = Const.TURRET_WIDTH;
        height = Const.TURRET_HEIGHT;

        //Set the turret to a position of the turret circle
        posX = _posX;
        posY = _posY;

        //Create the turret's bounding body (used for collisions)
        bodyZone = new Rectangle(
                posX - width / 2,
                posY - height / 2,
                width,
                height
        );

        //Start cooldown timer now that the turret is online
        coolDownTime = Const.COOLDOWN_TIME;
        coolDownTimer = new Timer();

        //Initialize the fire rate timer (the time between rounds of fire of a particular phase type)
        fireRate = Const.FIRE_RATE_COOLDOWN;
        fireRateTimer = new Timer();

        //The roundCounter of fire of the paricular type (used to track phases)
        roundCounter = 0;

        //True whenever a new volley of fire is ready
        newVolley = true;

        //Prepare the fire time timer (how long a round of fire lasts before a cooldown is required)
        volleyTime = Const.VOLLEY_TIME;
        fireTimer = new Timer();
        fireTimer.reset(volleyTime);

        //Start at fire type 0 (straight shot)
        fireType = 0; //CHANGE TO 0 LATER

        //Set the fire patterning counter to 0
        patternCounter = 0;

        //Set turret to alive
        alive = true;
    }

    //Return image
    public BufferedImage getImage() {
        return img;
    }

    //Return x-coordinate
    public int getXPos() {
        return posX;
    }

    //Return y-coordinate
    public int getYPos() {
        return posY;
    }

    //Return bounding body
    public Shape getBodyZone() {
        return bodyZone;
    }

    //Return status of turret
    public boolean isAlive() {
        return alive;
    }

    //Establish reference to the UFO
    public static void setUFO(UFO samurai) {
        myUFO = samurai;
    }

    //Establish reference to bullets
    public static void setBullets(ArrayList<Bullet> bullets) {
        turretBullets = bullets;
    }

    //Control the turret AI
    public void control() throws IOException {

        //Change the fire type if the round of fire is complete
        if (roundCounter == Const.ROUNDS_PER_PHASE) {

            //Change the fire type
            fireType++;
            fireType %= 4;

            //Reset the fireTimer for the new fire pattern
            fireTimer.reset(volleyTime);

            //Stop the coolDown timer
            coolDownTimer.stop();

            //Reset the roundCounter counter
            roundCounter = 0;
        }

        //If the volleyTime is complete, start the cooldown timer 
        if (fireTimer.isComplete()) {

            //If the timer cooldown hasn't started, activate it
            if (!coolDownTimer.isActive()) {
                coolDownTimer.reset(coolDownTime);
            } //If the timer cooldown has started, check if it is complete
            else {
                //If the cool down is complete, restart the fire time timer
                if (coolDownTimer.isComplete()) {

                    //Start a new round of fire
                    roundCounter++;

                    //A new volley is about to start, so set newVolley to true
                    newVolley = true;

                    //Reset the fire timer
                    fireTimer.reset(volleyTime);

                    //Stop/deactivate the coolDownTimer 
                    coolDownTimer.stop();
                } //While waiting for the cooldown to finish...
                else {
                    //Rotate the turrets to face the player
                    rotateTo(myUFO.getXPos(), myUFO.getYPos());
                }
            }
        } //If the timer timer isn't complete yet, continue to fire
        else {
            //Fire in the particular type/pattern
            switch (fireType) {
                //Fire Type 0: Rotate to target, then straight shot
                case 0: //CHANGE THE NUMBER TO A CONSTANT VALUE
                    //If the fire rate timer isn't active, reset it
                    if (!fireRateTimer.isActive()) {
                        fireRateTimer.reset(fireRate);
                    } //If it is already active...
                    else {
                        //If the timer is complete, fire
                        if (fireRateTimer.isComplete()) {
                            //Rotate to the UFO's position
                            rotateTo(myUFO.getXPos(), myUFO.getYPos());

                            //Fire a single, straight bullet in the direction of the UFO
                            turretBullets.add(new Bullet(
                                    posX,
                                    posY,
                                    myUFO.getXPos(),
                                    myUFO.getYPos(),
                                    Const.TURRET_DAMAGE,
                                    Const.BULLET_TURRET_URL));

                            //A volley has been completely, so set newVolley to false
                            newVolley = false;

                            //Reset the timer
                            fireRateTimer.reset(fireRate);
                        }
                    }

                    break;
                //Fire Type 1: Rotary shot
                case 1:

                    //Reset the fireRate timer
                    if (!fireRateTimer.isActive()) {
                        fireRateTimer.reset(fireRate);
                    } //If it is already active...
                    else {
                        //If it is a new volley, rotate the turrets such that they produce the desired effects
                        if (newVolley) {

                            //Rotate to face the centre of the field
                            rotateTo(Const.FIELD_WIDTH / 2, Const.FIELD_HEIGHT / 2);

                            //Invert the rotation angle so that each turret faces outwards from the centre of the field
                            rotationAngle += 180;
                            rotationAngle %= 360;
                        }

                        //Slowly rotate the turrets
                        rotationAngle += 0.5;
                        rotationAngle %= 360;

                        //If the fire rate timer is complete, fire a single shot straight ahead
                        if (fireRateTimer.isComplete()) {

                            //Fire a single, straight shot in the direction that the turret is currently facing
                            int desX = (int) (100 * Math.cos(Math.toRadians(rotationAngle))) + posX;
                            int desY = (int) (100 * Math.sin(Math.toRadians(rotationAngle))) + posY;

                            turretBullets.add(new Bullet(
                                    posX,
                                    posY,
                                    desX,
                                    desY,
                                    Const.TURRET_DAMAGE,
                                    Const.BULLET_TURRET_URL
                            ));

                            //A volley has been fired, so set newVolley to false
                            newVolley = false;

                            //Reset the timer
                            fireRateTimer.reset(fireRate);
                        }
                    }
                    break;

                //Fire Type 2: Sinusoidal wave shot
                case 2:

                    //Reset the fireRate timer
                    if (!fireRateTimer.isActive()) {
                        fireRateTimer.reset(fireRate);
                    } //If it is already active...
                    else {
                        //If it is a new volley, rotate the turrets such that they produce the desired effects
                        if (newVolley) {

                            //Rotate to face the centre of the field
                            rotateTo(Const.FIELD_WIDTH / 2, Const.FIELD_HEIGHT / 2);

                            //Invert the rotation angle so that each turret faces outwards from the centre of the field
                            rotationAngle += 180;
                            rotationAngle %= 360;

                            //Reset the patterning counter
                            patternCounter = 0;
                        }

                        //Slowly rotate the turrets
                        rotationAngle += Math.sin(patternCounter);
                        rotationAngle %= 360;

                        //Increment the pattern counter
                        patternCounter += 1 / 16.0;

                        //If the fire rate timer is complete, fire a single shot straight ahead
                        if (fireRateTimer.isComplete()) {

                            //Fire a single, straight shot in the direction that the turret is currently facing
                            int desX = (int) (100 * Math.cos(Math.toRadians(rotationAngle))) + posX;
                            int desY = (int) (100 * Math.sin(Math.toRadians(rotationAngle))) + posY;

                            turretBullets.add(new Bullet(
                                    posX,
                                    posY,
                                    desX,
                                    desY,
                                    Const.TURRET_DAMAGE,
                                    Const.BULLET_TURRET_URL
                            ));

                            //A volley has been completely, so set newVolley to false
                            newVolley = false;

                            //Reset the timer
                            fireRateTimer.reset(fireRate);
                        }
                    }

                    break;

                //Fire Type 3: Heat-seeking shot
                case 3:

                    //Reset the fireRate timer
                    if (!fireRateTimer.isActive()) {
                        fireRateTimer.reset(fireRate);
                    } //If it is already active...
                    else {

                        //If the fire rate timer is complete, fire a heat-seeking shot
                        if (fireRateTimer.isComplete()) {

                            //Rotate to face the UFO
                            rotateTo(myUFO.getXPos(), myUFO.getYPos());

                            //Create a new bullet
                            Bullet heatSeekingBullet = new Bullet(
                                    posX,
                                    posY,
                                    Const.TURRET_DAMAGE,
                                    Const.BULLET_TURRET_URL
                            );

                            //Make the bullet heat-seeking
                            heatSeekingBullet.makeHeatSeeking();

                            //Add the bullet to the arraylist of bullets
                            turretBullets.add(heatSeekingBullet);

                            //A volley has been completely, so set newVolley to false
                            newVolley = false;

                            //Reset the timer
                            fireRateTimer.reset(fireRate);
                        }
                    }

                    break;

                //Rotating beam shot
                case 4:
                    //If it is a new volley, rotate the turrets such that they produce the desired effects
                    if (newVolley) {

                        //Rotate to face the centre of the field
                        rotateTo(Const.FIELD_WIDTH / 2, Const.FIELD_HEIGHT / 2);

                        //Invert the rotation angle so that each turret faces outwards from the centre of the field
                        rotationAngle += 180;
                        rotationAngle %= 360;
                    }

                    //Slowly rotate the turrets
                    rotationAngle += 0.5;
                    rotationAngle %= 360;

                    //Create a rectangle emerging from the turret and moving towards the side of the screen
                    

                    //A volley has been completely, so set newVolley to false
                    newVolley = false;

                    break;
                default:
                    break;
            }

        }
    }

    //Update the rotation angle so that it will rotate to the desired angle
    public void rotateTo(int faceX, int faceY) {

        //Calculate the polar co-ordinates of the destination
        int deltaX = faceX - posX;
        int deltaY = posY - faceY;
        //Math.atan2 converts Cartesian coordinates to Polar coordinates
        //tan@ = Y/X (Math.atan2 returns angle @)
        destinationAngle = Math.atan((double) deltaY / deltaX);
        //Map desintationAngle to 0-360 degrees (http://stackoverflow.com/questions/1311049/how-to-map-atan2-to-degrees-0-360)
        //Right now it is in radians
        destinationAngle = Math.toDegrees(destinationAngle); //Convert to degrees
        //Correct discontinuities that occur in certain quadrants
        //2nd or 3rd quadrant
        if (deltaX < 0) {
            destinationAngle += 180;
        } //4th quadrant
        else if (deltaX >= 0 && deltaY < 0) {
            destinationAngle = 360 + destinationAngle;
        }
        //Calculate the required angle of rotation (from neutral image to destination angle)
        rotationAngle = Const.MAIN_BEARING - destinationAngle;
        //Make sure the most efficient path of rotation is being used
        if (Math.abs(rotationAngle) > 180) {
            if (rotationAngle < 0) {
                rotationAngle += 360;
            } //rotation angle > 0 (rotation angle cannot be 0 and be >180
            else {
                rotationAngle -= 360;
            }
        }
        //Update the bearing
        bearing = destinationAngle;
    }

    //Return the rotation operation necessary to rotate the image to the desired angle
    public AffineTransformOp getRotationOp() {

        //Determine the center of the image (in relation to image)
        int anchorX = img.getWidth() / 2;
        int anchorY = img.getHeight() / 2;

        //Define rotational transformation
        //Note: 
        //The rotation angle is from the neutral image bearing to the destination angle
        //It isn't from the current bearing to the destination angle
        AffineTransform tx = new AffineTransform();
        tx.rotate(Math.toRadians(rotationAngle), anchorX, anchorY);
        AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BICUBIC);

        return op;
    }

    //Events (animations and sound effects)
    //For animation and sound effects: pass in URLS during constructor 
    //This way, don't need all these methods for every subclass
    //Called when a character is dealt damage
    //Called when a turret first spawns
    public void onSpawn() {

    }

    //Called when a turret is destroyed
    public void onDeath() {

    }
}
