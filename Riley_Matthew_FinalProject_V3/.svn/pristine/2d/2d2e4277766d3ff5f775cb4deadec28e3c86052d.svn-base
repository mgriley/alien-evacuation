/**
 * Matthew Riley ICS3U-1 Final Project - Public Relations class (manages
 * inter-object interactions, namely bullet collisions)
 */
package riley_matthew_finalproject_v3;

import java.awt.Graphics;
import java.awt.Shape;
import java.awt.geom.Area;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

/**
 *
 * @author matthewriley
 */
public class Collisions {

    private UFO myUFO;
    private ArrayList<Turret> turrets;
    private ArrayList<Bullet> turretBullets;
    private ArrayList<Alien> aliens;

    public Collisions(
            UFO _myUFO,
            ArrayList<Turret> _turrets,
            ArrayList<Bullet> _turretBullets,
            ArrayList<Alien> _aliens
    ) {

        //Establish references to all significant game objects
        myUFO = _myUFO;
        turrets = _turrets;
        turretBullets = _turretBullets;
        aliens = _aliens;
    }

    //Manage all bullet collsions
    public void manageCollisions() throws IOException {

        //Manage collisions between turret bullets and UFO body
        Iterator<Bullet> itTurretBullets = turretBullets.iterator();
        while (itTurretBullets.hasNext()) {
            Bullet bullet = itTurretBullets.next();

            //Ensure the bullet hasn't already hit something
            if (!bullet.isHit()) {
                //If the UFO is hit, decrease its health by the damage of the bullet and deactivate the bullet
                if (isIntersecting(myUFO.getBodyZone(), bullet.getBoundingBody())) {
                    myUFO.changeHealth(-bullet.getDamage());
                    bullet.hit();
                }
            }
        }
        
        //Manage collisions between beams and the UFO body
        Iterator<Turret> itTurrets = turrets.iterator();
        while(itTurrets.hasNext()) {
            Turret turret = itTurrets.next();
            
            //If the beam is active
            if(turret.getBeam() != null) {
                //If the beam is intersecting with the UFO body
                Rectangle2D boundingRect = myUFO.getBodyZone().getBounds2D();
                if(turret.getBeam().getLine().intersects(boundingRect)) {
                    //Damage the UFO (don't discard of the beam)
                    myUFO.changeHealth(Const.BEAM_DAMAGE);
                }
            }
        }
    }

    public void updateBeamCollisions(boolean beamActive) {

        //If the beam is active, manage iteraction between repair kits and the tractor beam
        if (beamActive) {
            Iterator<Alien> itKits = aliens.iterator();
            while (itKits.hasNext()) {
                Alien repairKit = itKits.next();

                //If the beam intersects with the repair kit, heal/repair the UFO
                if (isIntersecting(myUFO.getTractorZone(), repairKit.getBodyZone())) {
                    myUFO.changeHealth(Const.ALIEN_HEAL);
                    //Set the repair kit to inactive, so that itKits cannot be used twice
                    repairKit.use();
                }
            }
        }
    }

    //Update the position of all bullets on the map
    public void updateBullets() throws IOException {

        //Update turret bullets
        Iterator<Bullet> it = turretBullets.iterator();
        while (it.hasNext()) {
            Bullet bullet = it.next();
            bullet.update();
            //Remove inactive bullets
            if (!bullet.isActive()) {
                it.remove();
            }
        }
    }

    public void drawBullets(Graphics g, GamePanel myGamePanel) {

        //Draw the turret bullets
        //Don't use an iterator b/c itKits creates a concurrent modification exception
        for (Bullet bullet : turretBullets.toArray(new Bullet[0])) {
            if (bullet != null) {
                //If the bullet is heatseeking, draw the rotated missile
                if(bullet.isHeatSeeking()) {
                    g.drawImage(
                        bullet.getRotationOp().filter(bullet.getImage(), null),
                        bullet.getX() - bullet.getImage().getWidth() / 2,
                        bullet.getY() - bullet.getImage().getHeight() / 2,
                        myGamePanel);
                }
                //If the bullet isn't heatseeking, draw an unrotated image
                else {
                    g.drawImage(
                        bullet.getImage(),
                        bullet.getX() - bullet.getImage().getWidth() / 2,
                        bullet.getY() - bullet.getImage().getHeight() / 2,
                        myGamePanel);
            }
                }
                

        }
    }

    public static boolean isIntersecting(Shape zoneA, Shape zoneB) {

        //Create two new areas, based on the shape arguments
        Area areaA = new Area(zoneA);
        Area areaB = new Area(zoneB);

        //Create a new area that is the itersection of the two areas
        areaA.intersect(areaB);

        //If this area isn't empty, there is a collision between the two areas
        return !areaA.isEmpty();
    }
}
