/*
 Matthew Riley
 ICS3U-1
 Final Project - Collisions class
 May 13, 2014
 */
package riley_matthew_finalproject_v3;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Area;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

/**
 *
 * @author matthewriley
 */
public class Collisions {

    //References to all game objects
    private UFO myUFO;
    private ArrayList<Turret> turrets;
    private ArrayList<Bullet> turretBullets;
    private ArrayList<Alien> aliens;

    //Constructor
    public Collisions(
            UFO _myUFO,
            ArrayList<Turret> _turrets,
            ArrayList<Bullet> _turretBullets,
            ArrayList<Alien> _aliens
    ) {

        //Establish references to all significant game objects
        myUFO = _myUFO;
        turrets = _turrets;
        turretBullets = _turretBullets;
        aliens = _aliens;
    }

    //Manage game collisions
    public void manageCollisions() throws IOException {

        //Manage collisions between turret bullets and UFO body
        Iterator<Bullet> itTurretBullets = turretBullets.iterator();
        while (itTurretBullets.hasNext()) {
            Bullet bullet = itTurretBullets.next();

            //f the bullet hasn't already hit something...
            if (!bullet.isHit()) {
                //Calculate the distance between the UFO's centre and the bullet's centre
                int distance = (int) Math.sqrt(Math.pow(myUFO.getXPos() - bullet.getX(), 2) + Math.pow(myUFO.getYPos() - bullet.getY(), 2));

                //If the UFO is hit by the bullet...
                if (distance < myUFO.getUFOImage().getWidth() / 2 + bullet.getImage().getWidth() / 2) {
                    //Damage the UFO
                    myUFO.changeHealth(-bullet.getDamage());

                    //Set the bullet to hit (which will deactivate it)
                    bullet.hit();
                }
            }
        }

        //Determine the UFO's rectangular bounding zone (aka perimeter rectangle)
        Rectangle2D boundingRect = new Rectangle2D.Double(
                myUFO.getXPos() - myUFO.getUFOImage().getWidth() / 2,
                myUFO.getYPos() - myUFO.getUFOImage().getHeight() / 2,
                myUFO.getUFOImage().getWidth(),
                myUFO.getUFOImage().getHeight()
        );

        //Manage collisions between beams and the UFO body
        Iterator<Turret> itTurrets = turrets.iterator();
        while (itTurrets.hasNext()) {
            Turret turret = itTurrets.next();

            //If the beam is active...
            if (turret.getBeam() != null) {
                //If the beam intersects the UFO's bounding rectangle...
                if (turret.getBeam().getLine().intersects(boundingRect)) {
                    //Damage the UFO
                    myUFO.changeHealth(Const.BEAM_DAMAGE);
                }
            }
        }

        //Manage collisions between the UFO's tractor beam and aliens to be rescued
        Iterator<Alien> itAliens = aliens.iterator();
        while (itAliens.hasNext()) {
            Alien myAlien = itAliens.next();

            //Calculate the distance between the UFO's centre and the alien's centre
            int distance = (int) Math.sqrt(Math.pow(myUFO.getXPos() - myAlien.getX(), 2) + Math.pow(myUFO.getYPos() - myAlien.getY(), 2));

            //If the UFO is close to the alien...
            if (distance < myUFO.getUFOImage().getWidth() / 2 + myAlien.getImage().getWidth() / 2) {
                //Play the alien resuced animation
                myUFO.onRescue();

                //Heal the UFO
                myUFO.changeHealth(Const.ALIEN_HEAL);

                //Set the repair kit to inactive, so that the alien cannot be rescued twice
                myAlien.rescue();
            }
        }
    }

    //Update the position of all bullets on the map
    public void updateBullets() throws IOException {

        Iterator<Bullet> it = turretBullets.iterator();
        while (it.hasNext()) {
            Bullet bullet = it.next();

            //Update the bullet's position
            bullet.update();

            //Remove inactive bullets
            if (!bullet.isActive()) {
                it.remove();
            }
        }
    }

    public void drawBullets(Graphics2D g2d, GamePanel myGamePanel) {

        //Draw the turret bullets
        for (Bullet bullet : turretBullets.toArray(new Bullet[0])) {

            //If the bullet isn't null...
            if (bullet != null) {

                //If the bullet is heatseeking...
                if (bullet.isHeatSeeking()) {
                    //Draw the missile (rotated to face the UFO)
                    g2d.drawImage(
                            bullet.getRotationOp().filter(bullet.getImage(), null),
                            bullet.getX() - bullet.getImage().getWidth() / 2,
                            bullet.getY() - bullet.getImage().getHeight() / 2,
                            myGamePanel);
                } //If the bullet isn't heatseeking...
                else {
                    //Draw the unrotated image of the bullet
                    g2d.drawImage(
                            bullet.getImage(),
                            bullet.getX() - bullet.getImage().getWidth() / 2,
                            bullet.getY() - bullet.getImage().getHeight() / 2,
                            myGamePanel);
                }
            }

        }
    }
}
